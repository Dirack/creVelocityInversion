#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct  (Madagascar Script)
#
# Purpose: Simulate diffractions in the stacked section and migrate them in
# time using focusing analysis, after that, do velocity inversion 
# using the algorithm from Camerom (2008).
#
# Site: http://www.dirackslounge.online
# 
# Version 1.0
#
# Programer: Rodolfo A. C. Neves (Dirack) 19/08/2020
#
# Email: rodolfo_profissional@hotmail.com
#
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

# Madagascar package
from rsf.proj import *

# Personal Madagascar recipes
from diffSimulationAndMigration import diffmig 
from diffSimulationAndMigration import diffsimul
from inputScons import castingParametersFromCmd

# Parameters dictionaries to the functions
diffSimulParameters = {'numberOfReflectors':2,
'section':'../modelingAndStack/stackedSection.rsf',
'velocities':(1.5,1.6),
'diffSimulatedSection':'diffSimulatedSection'}

diffMigParameters = {'diffSimulatedSection': 'diffSimulatedSection',
'diffMigratedSection': 'diffMigratedSection',
'v0':1.4,
'nv':100,
'dv':0.01,
'nx':201,
'padx':1000,
'nt':1001,
'tmin':0,
'tmax':4,
'rect1':10,
'rect2':10,
'srect1':1,
'srect2':3,
'vslope':None,
'units':'Km',
'f1':1,
'j3':1,
'dx':0.025,
'x0':0,
'beg1':0,
'frect1':0,
'frect2':0,
'an':1,
'nout':2048,
'vx0':None}

# substitute parameters into parameters dictionaries
# if some of them was passed through command line
castingParametersFromCmd(ARGLIST,diffSimulParameters)
castingParametersFromCmd(ARGLIST,diffMigParameters)


# Diffraction simulation in an iterative picking loop
diffsimul(**diffSimulParameters)

# Diffraction migration by focusing analysis
diffmig(**diffMigParameters)

# Velocity inversion with the Camerom algorithm (2008)
Flow('vdix2 vmig2',diffMigParameters['diffMigratedSection']+'-pik',
     '''
     dix rect1=20 rect2=20
     vrmsout=${TARGETS[1]}
     niter=40
     ''')

nz=200
dz=0.01
Flow('vxz x0 t0','vdix2',
     '''
     transp |
     cameron2d method=cheb neval=20 nc=1000 nz=%d dz=%g 
     x0=${TARGETS[1]} t0=${TARGETS[2]}
     ''' % (nz,dz),local=1)


Flow('vz','vxz',
	'''
	put label1=Lateral unit1=km label2=Depth unit2=km n3=1 |
	trasnp
	''')

End()
